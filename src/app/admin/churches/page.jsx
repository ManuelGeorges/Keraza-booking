// app/admin/churches/page.jsx

"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { auth, db } from "@/lib/firebase";
import {
  collection,
  getDocs,
  getDoc, // ุชุฃูุฏ ุฃู ูุฐู ูุณุชูุฑุฏุฉ
  doc,
  updateDoc,
  setDoc,
} from "firebase/firestore";
import { onAuthStateChanged } from "firebase/auth";
import * as XLSX from "xlsx";
import "./page.css";

const churchList = [
  "ูููุณุฉ ุงูุดููุฏ ุงูุนุธูู ูุงุฑูููุง ุจููููุฌ",
  "ูููุณุฉ ุงูุณูุฏุฉ ุงูุนุฐุฑุงุก ูุฑูู ู ุงููุฏูุณ ููุญูุง ุงูุญุจูุจ ุจุฌูุงูููุณ",
  "ูููุณุฉ ุงูุณูุฏุฉ ุงูุนุฐุฑุงุก ูุฑูู ู ุงูุงูุจุง ุจุงุฎููููุณ ุดุงุฑุน ุณูุฑูุง",
  "ูููุณุฉ ุฑุฆูุณ ุงูููุงุฆูุฉ ุงูุฌููู ููุฎุงุฆูู ุจูุตุทูู ูุงูู",
  "ูููุณุฉ ุงูุณูุฏุฉ ุงูุนุฐุฑุงุก ูุฑูู ู ุงูุดููุฏ ุงูุนุธูู ูุงุฑูุฑูุณ ุงูุฑุณูู ุจุฌุฑูู ุจูุงุฒุง",
  "ูููุณุฉ ุงูุนุฐุฑุงุก ููุงุฑุฌุฑุฌุณ ุจุบุจุฑูุงู",
  "ูููุณุฉ ุงูุงูุจุง ุดููุฏู ูุงูุงูุจุง ูุฑูููุง ุจุฏูุง",
  "ูููุณุฉ ูุงุฑุฌุฑุฌุณ ุจุงููุณ",
  "ูููุณุฉ ุงูุนุฐุฑุงุก ูุงูุงูุจุง ุจุงุฎููููุณ ููุจุฑู ุงููุงููุณ (ุงูุจุดุงุฑุฉ)",
  "ูููุณุฉ ุงูููุงู ููุฎุงุฆูู ูุงูุงูุจุง ูุงุฑุงุณ ุงุฑุถ ุงููููู",
  "ูููุณุฉ ุงูุนุฐุฑุงุก ูุงุจูุณูููู ุญุฌุฑ ุงูููุงุชูู",
  "ูููุณุฉ ุงูุนุฐุฑุงุก ู ูุงุฑูุฑูุณ ุฌุฑูู ุจูุงุฒุง โ ุฎุฏูุฉ ุงู ุงูุฑุญูุฉ",
  "ูููุณุฉ ูุงุฑุฌุฑุฌุณ ูุงูุงูุจุง ุงูุทููููุณ ูุญุฑู ุจู",
  "ูููุณุฉ ุงุจูุณูููู ุงูุจุฑูุฒู",
  "ูููุณุฉ ุงูุนุฐุฑุงุก ูุญุฑู ุจู",
  "ูููุณุฉ ุงูุนุฐุฑุงุก ููุงุฑูููุง ุจุงููุณุชุดูู ุงููุจุทู",
  "ูููุณุฉ ุงูุงูุจุง ุงุจุฑุงู ุฒูู ุงูุนุงุจุฏูู ูุญุฑู ุจู",
  "ูููุณุฉ ุงูุนุฐุฑุงุก ูุงููุฏูุณ ุจููุณ ุจูุฑููุฒ",
  "ูููุณุฉ ุงูููุงู ููุฎุงุฆูู ุบุฑุจุงู",
  "ุฌูุนูุฉ ุงุตุฏูุงุก ุงููุชุงุจ ุงูููุฏุณ ูุญุฑู ุจู",
  "ุฌูุนูุฉ ุงูููุงู ููุฎุงุฆูู ูุญุฑู ุจู",
  "ูููุณุฉ ุงูุนุฐุฑุงุก ูุฑูู ู ุงุจููุง ุณูุนุงู ุงูุงุฎูููู ุจุบุฑุจุงู",
  "ูููุณุฉ ุงูุดููุฏ ุงูุนุธูู ูุงุฑุฌุฑุฌุณ ุจุงูุญุถุฑุฉ",
  "ูููุณุฉ ุงููุฏูุณ ุงุจูููุงุฑ ู ุงูุจุงุจุง ููุฑูุณ ุงูุณุงุฏุณ ุจุงูุฏุฑูุณุฉ",
];

export default function ChurchesPage() {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      if (!user) {
        return router.push("/register");
      }
      const userDoc = await getDoc(doc(db, "leaders", user.uid));
      if (!userDoc.exists() || userDoc.data().role !== "admin") {
        return router.push("/leader/profile");
      }

      fetchData();
    });
    return () => unsubscribe();
  }, []);

  // ุฏุงูุฉ ูุณุงุนุฏุฉ ูุญุณุงุจ ุงูุณุนุฑ ุจุนุฏ ุงูุฎุตู
  const calculatePriceAfterDiscount = (originalPrice, discountPercentage) => {
    // ุงูุชุฃูุฏ ูู ุฃู ุงูุฎุตู ุฑูู ูุถูู ุงููุทุงู ูู 0-100
    const discount = parseFloat(discountPercentage);
    if (isNaN(discount) || discount < 0) return originalPrice;
    if (discount > 100) return 0; // ุฅุฐุง ูุงู ุงูุฎุตู 100% ุฃู ุฃูุซุฑุ ูุตุจุญ ุงูุณุนุฑ 0

    return originalPrice * (1 - (discount / 100));
  };

  const handlePaidToggle = async (id, churchName, currentPaidStatus) => {
    if (!id || !churchName) return;

    try {
      // ุชุญุฏูุซ ุญุงูุฉ ุงูุฏูุน ููุฎุงุฏู
      await updateDoc(doc(db, "leaders", id), {
        paid: !currentPaidStatus,
      });

      // ุชุญุฏูุซ ุญุงูุฉ ุงูุฏูุน ูููููุณุฉ ูู ููููุดู 'churches'
      await updateDoc(doc(db, "churches", churchName), {
        paid: !currentPaidStatus,
      });

      // ุชุญุฏูุซ ุงูุญุงูุฉ ุงููุญููุฉ ูุนูุณ ุงูุชุบููุฑ ููุฑุง
      setData((prev) =>
        prev.map((item) =>
          item.id === id ? { ...item, paid: !currentPaidStatus } : item
        )
      );
    } catch (error) {
      console.error("Error updating paid status:", error);
      alert("ูุดู ุชุญุฏูุซ ุญุงูุฉ ุงูุฏูุน. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.");
    }
  };

  const handleDiscountChange = async (churchName, newDiscountValue) => {
    let newDiscount = parseFloat(newDiscountValue);
    if (isNaN(newDiscount) || newDiscount < 0) {
      newDiscount = 0;
    }
    if (newDiscount > 100) {
      newDiscount = 100;
    }

    try {
      // ุชุญุฏูุซ ูุณุจุฉ ุงูุฎุตู ูู ููููุดู 'churches'
      await updateDoc(doc(db, "churches", churchName), {
        discountPercentage: newDiscount,
      });

      // ุชุญุฏูุซ ุงูุญุงูุฉ ุงููุญููุฉ ูุนูุณ ุงูุชุบููุฑ ููุฑุง
      setData((prevData) =>
        prevData.map((item) => {
          if (item.church === churchName) {
            const updatedTotalAfterDiscount = calculatePriceAfterDiscount(
              item.totalPayment, // ูุฐุง ูู ุงูุฅุฌูุงูู ูุจู ุงูุฎุตู
              newDiscount
            );
            return {
              ...item,
              discountPercentage: newDiscount,
              totalPaymentAfterDiscount: updatedTotalAfterDiscount,
            };
          }
          return item;
        })
      );
    } catch (error) {
      console.error("Error updating discount percentage:", error);
      alert("ูุดู ุชุญุฏูุซ ูุณุจุฉ ุงูุฎุตู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.");
    }
  };

  const fetchData = async () => {
    const leadersSnapshot = await getDocs(collection(db, "leaders"));
    const sportSnapshot = await getDocs(collection(db, "church_competitions"));
    const otherSnapshot = await getDocs(collection(db, "other-competitions"));

    const allCompetitionsDocs = [...sportSnapshot.docs, ...otherSnapshot.docs];

    const result = [];

    for (const churchName of churchList) {
      const leader = leadersSnapshot.docs.find(
        (doc) => doc.data().church === churchName
      );

      const churchCompsDocs = allCompetitionsDocs.filter(
        (compDoc) => compDoc.id === churchName
      );

      let totalSubs = 0;
      let totalPaymentBeforeDiscount = 0; // ูุฐุง ููุซู ุนููุฏ 'ุงูุณุนุฑ'
      let discountPercentage = 0; // ูููุฉ ุงูุชุฑุงุถูุฉ

      // ุฌูุจ ูุณุชูุฏ ุงููููุณุฉ ูู ููููุดู 'churches' ููุญุตูู ุนูู ูุณุจุฉ ุงูุฎุตู ุงูุฎุงุตุฉ ุจูุง
      const churchDocRef = doc(db, "churches", churchName);
      const churchDocSnap = await getDoc(churchDocRef);

      if (churchDocSnap.exists()) {
        discountPercentage = churchDocSnap.data().discountPercentage || 0;
      }

      churchCompsDocs.forEach((compDoc) => {
        const competitions = compDoc.data().competitions || {};
        Object.values(competitions).forEach((compDetails) => {
          totalSubs += compDetails.count || 0;
          totalPaymentBeforeDiscount += compDetails.totalPrice || 0;
        });
      });

      const totalPaymentAfterDiscount = calculatePriceAfterDiscount(
        totalPaymentBeforeDiscount,
        discountPercentage
      );

      const paid = leader?.data()?.paid || false;

      const leaderName = leader?.data()
        ? `${leader.data().firstName} ${leader.data().lastName}`
        : "โ";

      result.push({
        church: churchName,
        leader: leaderName,
        subscribers: totalSubs,
        totalPayment: totalPaymentBeforeDiscount, // ูุฐุง ูู 'ุงูุณุนุฑ'
        discountPercentage: discountPercentage,
        totalPaymentAfterDiscount: totalPaymentAfterDiscount, // ูุฐุง ูู 'ุงูุณุนุฑ ุงูุฅุฌูุงูู ุจุนุฏ ุงูุฎุตู'
        paid,
        id: leader?.id, // ูุนุฑูู ูุณุชูุฏ ุงูุฎุงุฏู
      });

      // ๐๏ธ ูุชุงุจุฉ ุฃู ุชุญุฏูุซ ุงูุจูุงูุงุช ูู ููููุดู churches
      const docDataToSet = {
        church: churchName,
        leader: leaderName,
        subscribers: totalSubs,
        totalPayment: totalPaymentBeforeDiscount, // ุชุฎุฒูู ุงูุฅุฌูุงูู ุงูุฃุตูู
        discountPercentage: discountPercentage,
        totalPaymentAfterDiscount: totalPaymentAfterDiscount,
        paid: paid,
      };

      if (leader?.id) {
        docDataToSet.leaderId = leader.id;
      }

      // ุงุณุชุฎุฏุงู { merge: true } ูุชุฌูุจ ุงููุชุงุจุฉ ููู ุงูุญููู ุงูููุฌูุฏุฉ
      await setDoc(doc(db, "churches", churchName), docDataToSet, { merge: true });
    }

    setData(result);
    setLoading(false);
  };

  const downloadExcel = () => {
    const exportData = data.map((row) => ({
      "ุงููููุณุฉ": row.church,
      "ุงูุฎุงุฏู": row.leader,
      "ุนุฏุฏ ุงููุดุชุฑููู": row.subscribers,
      "ุงูุณุนุฑ": row.totalPayment, // ุงูุณุนุฑ ุงูุฃุตูู
      "ูุณุจุฉ ุงูุฎุตู (%)": row.discountPercentage,
      "ุงูุณุนุฑ ุงูุฅุฌูุงูู ุจุนุฏ ุงูุฎุตู": row.totalPaymentAfterDiscount,
      "ุชู ุงูุฏูุนุ": row.paid ? "โ" : "โ",
    }));

    const worksheet = XLSX.utils.json_to_sheet(exportData);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Churches");
    XLSX.writeFile(workbook, "churches_report.xlsx");
  };

  if (loading) return <p className="ad-church-loading">ุฌุงุฑู ุงูุชุญููู...</p>;

  return (
    <div className="ad-church-container">
      <h1 className="ad-church-title">ุชูุฑูุฑ ุงูููุงุฆุณ ูุงูุงุดุชุฑุงูุงุช</h1>
      <button className="ad-church-download-btn" onClick={downloadExcel}>
        โฌ ุชุญููู Excel
      </button>
      <div className="ad-church-table-wrapper">
        <table className="ad-church-table">
          <thead>
            <tr>
              <th>ุงููููุณุฉ</th>
              <th>ุงูุฎุงุฏู</th>
              <th>ุนุฏุฏ ุงููุดุชุฑููู</th>
              <th>ุงูุณุนุฑ</th>
              <th>ูุณุจุฉ ุงูุฎุตู</th>
              <th>ุงูุณุนุฑ ุงูุฅุฌูุงูู ุจุนุฏ ุงูุฎุตู</th>
              <th>ุชู ุงูุฏูุนุ</th>
            </tr>
          </thead>
          <tbody>
            {data.map((church) => (
              <tr key={church.church}> {/* ููุง ุชุจุฏุฃ ุงููุดููุฉ ุนุงุฏุฉู */}
                <td>{church.church}</td> {/* ุชุฃูุฏ ูู ุนุฏู ูุฌูุฏ ูุณุงูุฉ ุจูู <td> ู {church.church} */}
                <td>{church.leader}</td>
                <td>{church.subscribers}</td>
                <td>{church.totalPayment.toLocaleString()} ุฌู</td>
                <td>
                  <input
                    type="number"
                    value={church.discountPercentage}
                    onChange={(e) =>
                      handleDiscountChange(church.church, e.target.value)
                    }
                    min="0"
                    max="100"
                    step="0.01"
                    className="discount-input"
                  />
                  %
                </td>
                <td>{church.totalPaymentAfterDiscount.toLocaleString()} ุฌู</td>
                <td>
                  <input
                    type="checkbox"
                    checked={church.paid}
                    onChange={() => handlePaidToggle(church.id, church.church, church.paid)}
                  />
                </td>
              </tr> // ูููุง ุชูุชูู ุงููุดููุฉุ ูุง ูุณุงูุงุช ุจูุถุงุก ูุจู ุฃู ุจุนุฏ </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}