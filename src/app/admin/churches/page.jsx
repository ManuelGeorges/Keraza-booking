"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { auth, db } from "@/lib/firebase";
import {
  collection,
  getDocs,
  query,
  where,
  getDoc,
  doc,
  updateDoc,
  setDoc,
} from "firebase/firestore";
import { onAuthStateChanged } from "firebase/auth";
import * as XLSX from "xlsx";
import "./page.css";

const churchList = [
  "ูููุณุฉ ุงูุดููุฏ ุงูุนุธูู ูุงุฑูููุง ุจููููุฌ",
  "ูููุณุฉ ุงูุณูุฏุฉ ุงูุนุฐุฑุงุก ูุฑูู ู ุงููุฏูุณ ููุญูุง ุงูุญุจูุจ ุจุฌูุงูููุณ",
  "ูููุณุฉ ุงูุณูุฏุฉ ุงูุนุฐุฑุงุก ูุฑูู ู ุงูุงูุจุง ุจุงุฎููููุณ  ุดุงุฑุน ุณูุฑูุง",
  "ูููุณุฉ ุฑุฆูุณ ุงูููุงุฆูุฉ ุงูุฌููู ููุฎุงุฆูู ุจูุตุทูู ูุงูู",
  "ูููุณุฉ ุงูุณูุฏุฉ ุงูุนุฐุฑุงุก ูุฑูู ู ุงูุดููุฏ ุงูุนุธูู ูุงุฑูุฑูุณ ุงูุฑุณูู ุจุฌุฑูู ุจูุงุฒุง",
  "ูููุณุฉ ุงูุนุฐุฑุงุก ููุงุฑุฌุฑุฌุณ ุจุบุจุฑูุงู",
  "ูููุณุฉ ุงูุงูุจุง ุดููุฏู ูุงูุงูุจุง ูุฑูููุง ุจุฏูุง",
  "ูููุณุฉ ูุงุฑุฌุฑุฌุณ ุจุงููุณ",
  "ูููุณุฉ ุงูุนุฐุฑุงุก ูุงูุงูุจุง ุจุงุฎููููุณ ููุจุฑู ุงููุงููุณ (ุงูุจุดุงุฑุฉ)",
  "ูููุณุฉ ุงูููุงู ููุฎุงุฆูู ูุงูุงูุจุง ูุงุฑุงุณ ุงุฑุถ ุงููููู",
  "ูููุณุฉ ุงูุนุฐุฑุงุก ูุงุจูุณูููู ุญุฌุฑ ุงูููุงุชูู",
  "ูููุณุฉ ุงูุนุฐุฑุงุก ู ูุงุฑูุฑูุณ ุฌุฑูู ุจูุงุฒุง โ ุฎุฏูุฉ ุงู ุงูุฑุญูุฉ",
  "ูููุณุฉ ูุงุฑุฌุฑุฌุณ ูุงูุงูุจุง ุงูุทููููุณ ูุญุฑู ุจู",
  "ูููุณุฉ ุงุจูุณูููู ุงูุจุฑูุฒู",
  "ูููุณุฉ ุงูุนุฐุฑุงุก ูุญุฑู ุจู",
  "ูููุณุฉ ุงูุนุฐุฑุงุก ููุงุฑูููุง ุจุงููุณุชุดูู ุงููุจุทู",
  "ูููุณุฉ ุงูุงูุจุง ุงุจุฑุงู ุฒูู ุงูุนุงุจุฏูู ูุญุฑู ุจู",
  "ูููุณุฉ ุงูุนุฐุฑุงุก ูุงููุฏูุณ ุจููุณ ุจูุฑููุฒ",
  "ูููุณุฉ ุงูููุงู ููุฎุงุฆูู ุบุฑุจุงู",
  "ุฌูุนูุฉ ุงุตุฏูุงุก ุงููุชุงุจ ุงูููุฏุณ ูุญุฑู ุจู",
  "ุฌูุนูุฉ ุงูููุงู ููุฎุงุฆูู ูุญุฑู ุจู",
  "ูููุณุฉ ุงูุนุฐุฑุงุก ูุฑูู ู ุงุจููุง ุณูุนุงู ุงูุงุฎูููู ุจุบุฑุจุงู",
  "ูููุณุฉ ุงูุดููุฏ ุงูุนุธูู ูุงุฑุฌุฑุฌุณ ุจุงูุญุถุฑุฉ",
  "ูููุณุฉ ุงููุฏูุณ ุงุจูููุงุฑ ู ุงูุจุงุจุง ููุฑูุณ ุงูุณุงุฏุณ ุจุงูุฏุฑูุณุฉ",
];

export default function ChurchesPage() {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      if (!user) return router.push("/register");
      const userDoc = await getDoc(doc(db, "leaders", user.uid));
      if (!userDoc.exists() || userDoc.data().role !== "admin")
        return router.push("/leader/profile");

      fetchData();
    });
    return () => unsubscribe();
  }, []);
const handlePaidToggle = async (id, current) => {
  if (!id) return;

  // โ ุชุญุฏูุซ ูููุฉ ุงูุฏูุน ูู ููููุดู leaders
  await updateDoc(doc(db, "leaders", id), {
    paid: !current,
  });

  // โ ุชุญุฏูุซ ูู ููููุดู ุงูููุงุฆุณ
  const updatedChurch = data.find((item) => item.id === id);
  if (updatedChurch) {
    await updateDoc(doc(db, "churches", updatedChurch.church), {
      paid: !current,
    });
  }

  // โ ุชุญุฏูุซ ูู ูุงุฌูุฉ ุงููุณุชุฎุฏู
  setData((prev) =>
    prev.map((item) =>
      item.id === id ? { ...item, paid: !current } : item
    )
  );
};

const fetchData = async () => {
  const leadersSnapshot = await getDocs(collection(db, "leaders"));
  const sportSnapshot = await getDocs(collection(db, "church_competitions"));
  const otherSnapshot = await getDocs(collection(db, "other-competitions"));

  const allCompetitions = [...sportSnapshot.docs, ...otherSnapshot.docs];

  const result = churchList.map((church) => {
    const leader = leadersSnapshot.docs.find(
      (doc) => doc.data().church === church
    );

    const churchComps = allCompetitions.filter(
      (comp) => comp.id === church
    );

    const totalSubs = churchComps.reduce((sum, comp) => {
      const competitions = comp.data().competitions || {};
      const counts = Object.values(competitions).map((c) => c.count || 0);
      return sum + counts.reduce((a, b) => a + b, 0);
    }, 0);

    const totalPayment = churchComps.reduce((sum, comp) => {
      const competitions = comp.data().competitions || {};
      const prices = Object.values(competitions).map((c) => c.totalPrice || 0);
      return sum + prices.reduce((a, b) => a + b, 0);
    }, 0);

    const paid = leader?.data()?.paid || false;

    const leaderName = leader?.data()
      ? `${leader.data().firstName} ${leader.data().lastName}`
      : "โ";

    return {
      church,
      leader: leaderName,
      subscribers: totalSubs,
      totalPayment,
      paid,
      id: leader?.id,
    };
  });

  setData(result);
  setLoading(false);

  // ๐๏ธ ูุชุงุจุฉ ุงูุจูุงูุงุช ูู ููููุดู churches
  for (const item of result) {
const docData = {
  church: item.church,
  leader: item.leader,
  subscribers: item.subscribers,
  totalPayment: item.totalPayment,
  paid: item.paid,
};

if (item.id) {
  docData.leaderId = item.id;
}

await setDoc(doc(db, "churches", item.church), docData);

  }
};



  const downloadExcel = () => {
    const exportData = data.map((row) => ({
      "ุงููููุณุฉ": row.church,
      "ุงูุฎุงุฏู": row.leader,
      "ุนุฏุฏ ุงููุดุชุฑููู": row.subscribers,
      "ุงููุงู ุงููุทููุจ": row.totalPayment,
      "ุชู ุงูุฏูุนุ": row.paid ? "โ" : "โ",
    }));

    const worksheet = XLSX.utils.json_to_sheet(exportData);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Churches");
    XLSX.writeFile(workbook, "churches_report.xlsx");
  };

  if (loading) return <p className="ad-church-loading">Loading...</p>;

  return (
    <div className="ad-church-container">
      <h1 className="ad-church-title">ุชูุฑูุฑ ุงูููุงุฆุณ ูุงูุงุดุชุฑุงูุงุช</h1>
      <button className="ad-church-download-btn" onClick={downloadExcel}>
        โฌ ุชุญููู Excel
      </button>
      <div className="ad-church-table-wrapper">
        <table className="ad-church-table">
          <thead>
            <tr>
              <th>ุงููููุณุฉ</th>
              <th>ุงูุฎุงุฏู</th>
              <th>ุนุฏุฏ ุงููุดุชุฑููู</th>
              <th>ุงููุงู ุงููุทููุจ</th>
              <th>ุชู ุงูุฏูุนุ</th>
            </tr>
          </thead>
          <tbody>
            {data.map((church) => (
              <tr key={church.church}>
                <td>{church.church}</td>
                <td>{church.leader}</td>
                <td>{church.subscribers}</td>
                <td>{church.totalPayment} ุฌ</td>
                <td>
            <input
            type="checkbox"
            checked={church.paid}
            onChange={() => handlePaidToggle(church.id, church.paid)}
            />

                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}
